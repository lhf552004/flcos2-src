{"version":3,"sources":["webpack:///src/app/profile/profile-routing.module.ts","webpack:///src/app/profile/profile.module.ts","webpack:///src/app/profile/profile/profile.component.ts","webpack:///src/app/profile/profile/profile.component.html","webpack:///src/app/profile/route-resolvers/user-resolver.service.ts"],"names":["routes","path","component","resolve","user","ProfileRoutingModule","forChild","imports","exports","ProfileModule","declarations","ProfileComponent","route","router","userService","authenticationService","formBuilder","notificatorService","hide","isInfoEdited","isPasswordChanged","minPw","unsubscribe","passwordMatchValidator","formGroup","get","value","passwordMismatch","group","password","required","minLength","password2","validator","data","pipe","subscribe","currentUser","navigate","next","complete","updateUser","id","x","sendNotification","lastName","firstName","hasError","setErrors","infoChanged","save","cancel","onPasswordInput","changePassword","selector","templateUrl","styleUrls","UserResolverService","state","currentUserValue","getUser","providedIn"],"mappings":"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","file":"profile-profile-module-es5.js","sourcesContent":["import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {ProfileComponent} from './profile/profile.component';\r\nimport {UserResolverService} from './route-resolvers/user-resolver.service';\r\n\r\nconst routes: Routes = [{ path: '', component: ProfileComponent, resolve: {user: UserResolverService} }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProfileRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport {ProfileRoutingModule} from './profile-routing.module';\r\nimport {AngularMaterialModule} from '../angular-material-module';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport {SharedModule} from '../shared/shared.module';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ProfileComponent],\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    MatInputModule,\r\n    AngularMaterialModule,\r\n    ProfileRoutingModule\r\n  ]\r\n})\r\nexport class ProfileModule { }\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {FormBuilder, FormGroup, ValidationErrors, ValidatorFn, Validators} from '@angular/forms';\r\nimport {Subject} from 'rxjs';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {AuthenticationService} from '../../core/user/authentication.service';\r\nimport {User} from '../../core/user/models/user.model';\r\nimport {UserService} from '../../core/user/user.service';\r\nimport {NotificatorService} from '../../core/notificator/notificator.service';\r\nimport {Notification} from '../../core/notificator/notification.model';\r\nimport {Job} from '../../lines/jobs/shared/models/job.model';\r\n\r\n@Component({\r\n  selector: 'emes-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent implements OnInit, OnDestroy {\r\n  hide = true;\r\n  currentUser: User;\r\n  lastName: string;\r\n  firstName: string;\r\n  isInfoEdited = false;\r\n  isPasswordChanged = false;\r\n  minPw = 5;\r\n  formGroup: FormGroup;\r\n  passwordText: string;\r\n  firstNameText: string;\r\n  lastNameText: string;\r\n  // Used for cleaning subscription\r\n  private unsubscribe: Subject<void> = new Subject();\r\n\r\n  constructor(private route: ActivatedRoute,\r\n              private router: Router,\r\n              private userService: UserService,\r\n              private authenticationService: AuthenticationService,\r\n              private formBuilder: FormBuilder,\r\n              private notificatorService: NotificatorService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const passwordMatchValidator: ValidatorFn = (formGroup: FormGroup): ValidationErrors | null => {\r\n      if (formGroup.get('password').value === formGroup.get('password2').value) {\r\n        return null;\r\n      } else {\r\n        return {passwordMismatch: true};\r\n      }\r\n    };\r\n    this.formGroup = this.formBuilder.group({\r\n      password: ['', [Validators.required, Validators.minLength(this.minPw)]],\r\n      password2: ['', [Validators.required]]\r\n    }, {validator: passwordMatchValidator});\r\n\r\n    this.route.data.pipe(takeUntil(this.unsubscribe)).subscribe((data: { user: User }) => {\r\n      if (data.user != null) {\r\n        this.currentUser = data.user;\r\n      }\r\n    });\r\n\r\n    this.authenticationService.currentUser.pipe(takeUntil(this.unsubscribe)).subscribe(user => {\r\n      if (user == null) {\r\n        this.router.navigate(['/']);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  save(): void {\r\n    this.currentUser.password = '';\r\n    this.userService.updateUser(this.currentUser.id, this.currentUser, true).pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.notificatorService.sendNotification(new Notification('Update profile successfully!', 'info'));\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  changePassword(): void {\r\n    this.userService.updateUser(this.currentUser.id, this.currentUser, false).pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.notificatorService.sendNotification(new Notification('Change password successfully!', 'info'));\r\n    });\r\n  }\r\n\r\n  infoChanged(): void {\r\n    if (this.currentUser.lastName === '' || this.currentUser.firstName === '') {\r\n      this.isInfoEdited = false;\r\n    } else {\r\n      this.isInfoEdited = true;\r\n    }\r\n  }\r\n\r\n  get password() {\r\n    return this.formGroup.get('password');\r\n  }\r\n\r\n  get password2() {\r\n    return this.formGroup.get('password2');\r\n  }\r\n\r\n  /* Called on each input in either password field */\r\n  onPasswordInput(): void {\r\n    if (this.formGroup.hasError('passwordMismatch')) {\r\n      this.password2.setErrors([{passwordMismatch: true}]);\r\n      this.isPasswordChanged = false;\r\n    } else {\r\n      this.password2.setErrors(null);\r\n      this.isPasswordChanged = true;\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid d-flex flex-column\">\r\n  <div class=\"container\">\r\n    <h3>Profile</h3>\r\n  </div>\r\n</div>\r\n\r\n<section>\r\n  <div class=\"container\">\r\n    <div class=\"card-deck\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-text\">Basic Info</h5>\r\n          <mat-form-field hintLabel=\"Max 10 characters\" appearance=\"fill\">\r\n            <mat-label>Enter Your Last Name</mat-label>\r\n            <input matInput #lastName [(ngModel)]=\"currentUser.lastName\" (input)=\"infoChanged()\" maxlength=\"10\" placeholder=\"Ex. Nougat\">\r\n            <mat-hint align=\"end\">{{lastName.value?.length || 0}}/10</mat-hint>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field hintLabel=\"Max 10 characters\" appearance=\"fill\">\r\n            <mat-label>Enter Your First Name</mat-label>\r\n            <input matInput #firstName [(ngModel)]=\"currentUser.firstName\" (input)=\"infoChanged()\" maxlength=\"10\" placeholder=\"Ex. Nougat\">\r\n            <mat-hint align=\"end\">{{firstName.value?.length || 0}}/10</mat-hint>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field hintLabel=\"Max 10 characters\" appearance=\"fill\">\r\n            <mat-label>Enter Your Email</mat-label>\r\n            <input matInput #firstName [(ngModel)]=\"currentUser.email\" (input)=\"infoChanged()\" maxlength=\"10\" placeholder=\"Ex. Nougat\">\r\n            <mat-hint align=\"end\">{{firstName.value?.length || 0}}/10</mat-hint>\r\n          </mat-form-field>\r\n\r\n          <button [disabled]=\"!isInfoEdited\" mat-button color=\"primary\" (click)=\"save()\">Save</button>\r\n          <button mat-button color=\"primary\" (click)=\"cancel()\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n<section>\r\n  <div class=\"container\">\r\n    <div class=\"card-deck\">\r\n      <div class=\"card\">\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-text\">Change Password</h5>\r\n          <form [formGroup]=\"formGroup\">\r\n            <mat-form-field>\r\n              <input matInput type=\"password\" [(ngModel)]=\"currentUser.password\" [type]=\"hide ? 'password' : 'text'\" placeholder=\"Password\"\r\n                     formControlName=\"password\" (input)=\"onPasswordInput()\">\r\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n                      [attr.aria-pressed]=\"hide\">\r\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"password.hasError('required')\">Password is required</mat-error>\r\n              <mat-error *ngIf=\"password.hasError('minlength')\">Password must have at least {{minPw}}characters\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field>\r\n              <input matInput type=\"password\" [type]=\"hide ? 'password' : 'text'\" placeholder=\"Confirm password\"\r\n                     formControlName=\"password2\" (input)=\"onPasswordInput()\">\r\n              <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n                      [attr.aria-pressed]=\"hide\">\r\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n              </button>\r\n              <mat-error *ngIf=\"password2.hasError('required')\">Please confirm your password</mat-error>\r\n              <mat-error *ngIf=\"password2.invalid && !password2.hasError('required')\">Passwords don't match</mat-error>\r\n            </mat-form-field>\r\n          </form>\r\n          <button mat-button [disabled]=\"!isPasswordChanged\" color=\"primary\" (click)=\"changePassword()\">Save</button>\r\n          <button mat-button color=\"primary\" (click)=\"cancel()\">Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Injectable } from '@angular/core';\r\nimport {ProductService} from '../../products/shared/product.service';\r\nimport {ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {Observable} from 'rxjs';\r\nimport {Product} from '../../products/shared/models/product.model';\r\nimport {UserService} from '../../core/user/user.service';\r\nimport {User} from '../../core/user/models/user.model';\r\nimport {AuthenticationService} from '../../core/user/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserResolverService {\r\n\r\n  constructor(private userService: UserService, private authenticationService: AuthenticationService, private router: Router) {\r\n  }\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<User> {\r\n    const id = this.authenticationService.currentUserValue.id;\r\n    return this.userService.getUser(id as string);\r\n  }\r\n}\r\n"]}