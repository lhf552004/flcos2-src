{"version":3,"sources":["webpack:///src/app/opc-servers/opc-server-default/opc-server-default.component.ts","webpack:///src/app/opc-servers/opc-server-default/opc-server-default.component.html","webpack:///src/app/opc-servers/opc-server-routing.module.ts","webpack:///src/app/opc-servers/opc-server/opc-server.component.ts","webpack:///src/app/opc-servers/opc-server/opc-server.component.html","webpack:///src/app/opc-servers/opc-servers.module.ts","webpack:///src/app/opc-servers/opc-servers/opc-servers.component.ts","webpack:///src/app/opc-servers/opc-servers/opc-servers.component.html","webpack:///src/app/opc-servers/route-resolvers/opc-server-resolver.service.ts","webpack:///src/app/opc-servers/route-resolvers/opc-servers-resolver.service.ts","webpack:///src/app/opc-servers/shared/opc-server-config.service.ts"],"names":["OpcServerDefaultComponent","selector","templateUrl","styleUrls","routes","path","component","resolve","opcServers","children","opcServer","OpcServerRoutingModule","forChild","imports","exports","OpcServerComponent","opcServerConfigService","dynamicFormService","notificatorService","route","router","unsubscribe","faEllipsisV","isChanged","opcServer$","pipe","subscribe","x","next","complete","update","id","sendNotification","error","newOpcServer","name","create","config","headerText","submitText","closeText","onSubmit","doDeleteOPCServer","onDismiss","notifications","popNotification","navigate","relativeTo","save","copy","opcServerChanged","OpcServersModule","declarations","OpcServersComponent","opcServers$","menuItems","map","opc","label","icon","newPageMenuItem","stickyBottom","onClick","showCreateNewOpcServer","push","sectionId","e","doCreateOpcServer","extraButtons","fields","type","placeholder","validation","required","popDynamicFormModal","OpcServerResolverService","state","paramMap","get","providedIn","OpcServersResolverService","getAll","OpcServerConfigService","http","opcConfigUrl","baseUrl","address","internal","tcpPort","httpsPort","status","find","o","page","size","getValue","existed","idx","findIndex","splice"],"mappings":"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","file":"opc-servers-opc-servers-module-es5.js","sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'emes-opc-server-default',\r\n  templateUrl: './opc-server-default.component.html',\r\n  styleUrls: ['./opc-server-default.component.scss']\r\n})\r\nexport class OpcServerDefaultComponent implements OnInit {\r\n\r\n  ngOnInit(): void {}\r\n\r\n}\r\n","<p>opc-server-default works!</p>\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {OpcServersComponent} from './opc-servers/opc-servers.component';\r\nimport {OpcServerResolverService} from './route-resolvers/opc-server-resolver.service';\r\nimport {OpcServersResolverService} from './route-resolvers/opc-servers-resolver.service';\r\nimport {OpcServerComponent} from './opc-server/opc-server.component';\r\nimport {OpcServerDefaultComponent} from './opc-server-default/opc-server-default.component';\r\n\r\n\r\nconst routes: Routes = [{\r\n  path: '', component: OpcServersComponent, resolve: {opcServers: OpcServersResolverService}, children: [\r\n    {path: ':opcServerId', component: OpcServerComponent, resolve: {opcServer: OpcServerResolverService}},\r\n    {path: '', component: OpcServerDefaultComponent}\r\n  ]\r\n}];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class OpcServerRoutingModule {\r\n}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {IconDefinition, faEllipsisV} from '@fortawesome/free-solid-svg-icons';\r\nimport {OPCServer} from '../shared/models/opc-server.model';\r\nimport {OpcServerConfigService} from '../shared/opc-server-config.service';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {Role} from '../../core/user/models/role.model';\r\nimport {DynamicFormService} from 'dynamic-form';\r\nimport {Notification} from '../../core/notificator/notification.model';\r\nimport {NotificatorService} from '../../core/notificator/notificator.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'emes-opc-server',\r\n  templateUrl: './opc-server.component.html',\r\n  styleUrls: ['./opc-server.component.scss']\r\n})\r\nexport class OpcServerComponent implements OnInit, OnDestroy {\r\n  // Used for cleaning subscription\r\n  unsubscribe: Subject<void> = new Subject();\r\n  isAuthor: boolean;\r\n  isOwner: boolean;\r\n  // Icon\r\n  faEllipsisV: IconDefinition = faEllipsisV;\r\n\r\n  // Indicator whether current opc server configuration is changed\r\n  isChanged = false;\r\n\r\n  opcServer: OPCServer;\r\n\r\n  constructor(private opcServerConfigService: OpcServerConfigService,\r\n              private dynamicFormService: DynamicFormService,\r\n              private notificatorService: NotificatorService,\r\n              private route: ActivatedRoute,\r\n              private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.opcServerConfigService.opcServer$.pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.opcServer = x;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  opcServerChanged() {\r\n    this.isChanged = true;\r\n  }\r\n\r\n  endPointUrlChanged() {\r\n    this.isChanged = true;\r\n  }\r\n\r\n  save() {\r\n    this.opcServerConfigService.update(this.opcServer.id, this.opcServer).pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.isChanged = false;\r\n      this.notificatorService.sendNotification(new Notification('Save successfully', 'info'));\r\n    }, error => {\r\n      this.notificatorService.sendNotification(new Notification('Save failed', 'danger'));\r\n    });\r\n  }\r\n\r\n  copy() {\r\n    const newOpcServer = {...this.opcServer, id: '', name: this.opcServer.name + '- copy'};\r\n    this.opcServerConfigService.create(newOpcServer)\r\n      .pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.notificatorService.sendNotification(new Notification('Copy successfully with ' + this.opcServer.name + '- copy', 'info'));\r\n    });\r\n  }\r\n\r\n  delete() {\r\n    const config = {\r\n      headerText: 'Delete Opc Server',\r\n      submitText: 'Ok',\r\n      closeText: 'Cancel',\r\n      onSubmit: () => this.doDeleteOPCServer(),\r\n      onDismiss: () => {\r\n      },\r\n      notifications: [\r\n        'Are you sure to delete the opc server?',\r\n        this.opcServer.name\r\n      ]\r\n    };\r\n    this.dynamicFormService.popNotification(config);\r\n  }\r\n\r\n  doDeleteOPCServer() {\r\n    this.opcServerConfigService.delete(this.opcServer.id).pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.notificatorService.sendNotification(new Notification('OPC Server ' + this.opcServer.name + ' is deleted', 'info'));\r\n      this.router.navigate(['..'], {relativeTo: this.route});\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid d-flex flex-column\">\r\n  <div class=\"row justify-content-between align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n    <div class=\"col-auto\">\r\n      <h2>\r\n        {{'OPC.OPC SERVER' | translate}}\r\n      </h2>\r\n    </div>\r\n\r\n    <div class=\"col-auto\">\r\n      <div class=\"btn-toolbar mb-2 mb-md-0\">\r\n        <button [disabled]=\"!isChanged\" type=\"button\" class=\"btn btn-sm btn-primary mr-2\" (click)=\"save()\">{{'GENERAL.SAVE' | translate}}</button>\r\n\r\n        <div class=\"btn-group mr-2\" ngbDropdown placement=\"bottom-right\">\r\n          <button type=\"button\" class=\"btn btn-sm btn-link dropdown-icon\" ngbDropdownToggle>\r\n            <fa-icon class=\"text-primary pointer\" [icon]=\"faEllipsisV\" [fixedWidth]=\"true\"></fa-icon>\r\n          </button>\r\n          <div class=\"dropdown-menu\" ngbDropdownMenu>\r\n            <button ngbDropdownItem (click)=\"copy()\">{{'GENERAL.COPY' | translate}}</button>\r\n            <button ngbDropdownItem (click)=\"delete()\">{{'GENERAL.DELETE' | translate}}</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<form class=\"ml-2 mr-2\">\r\n  <div class=\"form-row\">\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <label for=\"inputId\">Id</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"inputId\" name=\"inputId\" [(ngModel)]=\"opcServer.id\" disabled>\r\n    </div>\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <label for=\"inputTargetWeight\">{{'GENERAL.STATUS' | translate}}</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"inputTargetWeight\" name=\"inputTargetWeight\" [(ngModel)]=\"opcServer.status\" disabled>\r\n    </div>\r\n\r\n  </div>\r\n  <div class=\"form-row\">\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <label for=\"inputName\">{{'GENERAL.NAME' | translate}}</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"inputName\" name=\"inputName\" [(ngModel)]=\"opcServer.name\" (input)=\"opcServerChanged()\" placeholder=\"Enter Name here\">\r\n    </div>\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <label for=\"inputLine\">{{'OPC.ADDRESS' | translate}}</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"inputLine\" name=\"inputLine\" [(ngModel)]=\"opcServer.address\" (input)=\"opcServerChanged()\">\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"form-row\">\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <label for=\"inputName\">{{'OPC.TCP PORT' | translate}}</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"inputTcpPort\" name=\"inputTcpPort\" [(ngModel)]=\"opcServer.tcpPort\" (input)=\"opcServerChanged()\" placeholder=\"Enter tcp port here\">\r\n    </div>\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <label for=\"inputLine\">{{'OPC.HTTPS PORT' | translate}}</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"inputHttpsPort\" name=\"inputHttpsPort\" [(ngModel)]=\"opcServer.httpsPort\" (input)=\"opcServerChanged()\" placeholder=\"Enter https port here\">\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"form-row\">\r\n    <div class=\"form-group col-md-6 col-sm-12\">\r\n      <div class=\"form-check col-md-6 col-sm-12\">\r\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"checkboxInternal\" name=\"checkboxInternal\" [(ngModel)]=\"opcServer.internal\" (input)=\"opcServerChanged()\" placeholder=\"Enter Name here\">\r\n        <label class=\"form-check-label\" for=\"inputName\">{{'GENERAL.INTERNAL' | translate}}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OpcServersComponent } from './opc-servers/opc-servers.component';\r\nimport { OpcServerComponent } from './opc-server/opc-server.component';\r\nimport { OpcServerDefaultComponent } from './opc-server-default/opc-server-default.component';\r\nimport {OpcServerRoutingModule} from './opc-server-routing.module';\r\nimport {SharedModule} from '../shared/shared.module';\r\nimport {NgbDropdownModule} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [OpcServersComponent, OpcServerComponent, OpcServerDefaultComponent],\r\n  imports: [\r\n    SharedModule,\r\n    NgbDropdownModule,\r\n    OpcServerRoutingModule\r\n  ]\r\n})\r\nexport class OpcServersModule { }\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\nimport {UserService} from '../../core/user/user.service';\r\nimport {takeUntil} from 'rxjs/operators';\r\nimport {faExternalLinkAlt, faPlus, faTasks, faTrash} from '@fortawesome/free-solid-svg-icons';\r\nimport {User} from '../../core/user/models/user.model';\r\nimport {Role} from '../../core/user/models/role.model';\r\nimport {UserViewerComponent} from '../../admin/user-viewer/user-viewer.component';\r\nimport {DataTableSettings, DataTableColumnDefinition, DataTableToolbarControl} from 'data-table';\r\nimport {DynamicFormService, ModalConfig, CustomValidators} from 'dynamic-form';\r\nimport {OpcServerConfigService} from '../shared/opc-server-config.service';\r\nimport {MenuItem} from '../../shared/side-bar/model/menu-item.model';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {OPCServer} from '../shared/models/opc-server.model';\r\n\r\n@Component({\r\n  selector: 'emes-opc-servers',\r\n  templateUrl: './opc-servers.component.html',\r\n  styleUrls: ['./opc-servers.component.scss']\r\n})\r\nexport class OpcServersComponent implements OnInit, OnDestroy {\r\n\r\n  // Menu items\r\n  menuItems: MenuItem[];\r\n\r\n  // Used for cleaning subscription\r\n  unsubscribe: Subject<void> = new Subject();\r\n\r\n  constructor(private opcServerConfigService: OpcServerConfigService,\r\n              private dynamicFormService: DynamicFormService,\r\n              private route: ActivatedRoute, private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.opcServerConfigService.opcServers$.pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n      this.menuItems = x.map(opc => ({\r\n        id: opc.id,\r\n        label: opc.name,\r\n        icon: null,\r\n        route: [opc.id],\r\n        children: []\r\n      }));\r\n      const newPageMenuItem: MenuItem = {\r\n        id: 'newPageMenuItemId',\r\n        label: 'New Page',\r\n        icon: faPlus,\r\n        stickyBottom: true,\r\n        onClick: () => this.showCreateNewOpcServer('', '')\r\n      };\r\n      this.menuItems.push(newPageMenuItem);\r\n    });\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n  }\r\n\r\n  showCreateNewOpcServer(path: string, sectionId: string) {\r\n    const config: ModalConfig = {\r\n      headerText: 'Create a Opc Server',\r\n      submitText: 'OK',\r\n      closeText: 'Cancel',\r\n      onSubmit: (e: OPCServer) => this.doCreateOpcServer(e),\r\n      onDismiss: (e: string) => {\r\n      },\r\n      extraButtons: [],\r\n      fields: [\r\n        {\r\n          type: 'input',\r\n          label: 'Name',\r\n          name: 'name',\r\n          placeholder: 'Enter a opc server name',\r\n          validation: [\r\n            CustomValidators.required('Opc Server name required'),\r\n          ]\r\n        },\r\n        {\r\n          type: 'input',\r\n          label: 'Address',\r\n          name: 'address',\r\n          placeholder: 'Enter the address',\r\n          validation: [\r\n            CustomValidators.required('Address required'),\r\n          ]\r\n        },\r\n        {\r\n          type: 'checkbox',\r\n          label: 'Is internal',\r\n          name: 'internal',\r\n          placeholder: 'Is Internal',\r\n          validation: []\r\n        },\r\n        {\r\n          type: 'number',\r\n          label: 'Tcp binding port',\r\n          name: 'tcpPort',\r\n          placeholder: 'Enter the tcp binding port',\r\n          validation: [\r\n            CustomValidators.required('Tcp binding port required'),\r\n          ]\r\n        },\r\n        {\r\n          type: 'number',\r\n          label: 'Https binding port',\r\n          name: 'httpsPort',\r\n          placeholder: 'Enter the https binding port',\r\n          validation: [\r\n            CustomValidators.required('Https binding port required'),\r\n          ]\r\n        },\r\n        {\r\n          type: 'input',\r\n          label: 'Config path',\r\n          name: 'configPath',\r\n          placeholder: 'Enter the config path',\r\n          validation: [\r\n            CustomValidators.required('Config path required'),\r\n          ]\r\n        },\r\n      ]\r\n    };\r\n    this.dynamicFormService.popDynamicFormModal(config);\r\n  }\r\n\r\n  doCreateOpcServer(opcServer: OPCServer) {\r\n    this.opcServerConfigService.create(opcServer).pipe(takeUntil(this.unsubscribe)).subscribe();\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid h-100 px-0\">\r\n  <div class=\"row h-100 no-gutters\">\r\n    <emes-side-bar class=\"col-md-3 col-lg-2 d-none d-md-block bg-light\" [header]=\"'OPC.OPC SERVERS'\" [menuItems]=\"menuItems\"></emes-side-bar>\r\n\r\n    <main class=\"col-md-9 col-lg-10 d-flex flex-column w-100\">\r\n      <router-outlet></router-outlet>\r\n    </main>\r\n\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport {ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {Observable} from 'rxjs';\r\nimport {OpcServerConfigService} from '../shared/opc-server-config.service';\r\nimport {OPCServer} from '../shared/models/opc-server.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OpcServerResolverService {\r\n\r\n  constructor(private opcServerConfigService: OpcServerConfigService, private router: Router) {\r\n  }\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<OPCServer> {\r\n    const id = route.paramMap.get('opcServerId');\r\n    return this.opcServerConfigService.get(id as string);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {OpcServerConfigService} from '../shared/opc-server-config.service';\r\nimport {ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {Observable} from 'rxjs';\r\nimport {OPCServer} from '../shared/models/opc-server.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OpcServersResolverService {\r\n\r\n  constructor(private opcServerConfigService: OpcServerConfigService, private router: Router) {\r\n  }\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<OPCServer[]> {\r\n    return this.opcServerConfigService.getAll(0, 50);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {BehaviorSubject, Observable, of} from 'rxjs';\r\nimport {Order} from '../../orders/shared/models/order.model';\r\nimport {tap} from 'rxjs/operators';\r\nimport {environment} from '../../../environments/environment';\r\nimport {OPCServer} from './models/opc-server.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OpcServerConfigService {\r\n  private opcConfigUrl = environment.baseUrl + 'api/v1/opc-configs';\r\n  opcServers$: BehaviorSubject<OPCServer[]> = new BehaviorSubject<OPCServer[]>([]);\r\n  opcServer$: BehaviorSubject<OPCServer | null> = new BehaviorSubject<OPCServer | null>(null);\r\n  opcServers: OPCServer[] = [\r\n    {\r\n      id: '1',\r\n      name: 'OPC',\r\n      address: '0.0.0.0',\r\n      internal: false,\r\n      tcpPort: 12345,\r\n      httpsPort: 1234,\r\n      status: 'Running'\r\n    }\r\n  ];\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get(id: string): Observable<OPCServer> {\r\n    // const url = `${this.opcConfigUrl}/${id}`;\r\n    // return this.http.get<OPCServer>(url).pipe(tap(x => {\r\n    //   this.opcServer$.next(x);\r\n    // }));\r\n    const opcServer = this.opcServers.find(o => o.id === id);\r\n    this.opcServer$.next(opcServer);\r\n    return of(opcServer);\r\n  }\r\n\r\n  getAll(page: number, size: number): Observable<OPCServer[]> {\r\n    // const url = `${this.opcConfigUrl}`;\r\n    // return this.http.get<OPCServer[]>(url).pipe(tap(x => {\r\n    //   this.opcServers$.next(x);\r\n    // }));\r\n    this.opcServers$.next(this.opcServers);\r\n    return of(this.opcServers);\r\n  }\r\n\r\n  create(opcServer: OPCServer): Observable<any> {\r\n    // const url = `${this.opcConfigUrl}`;\r\n    // return this.http.post(url, opcServer).pipe(tap(x => {\r\n    //   const opcServers = this.opcServers$.getValue();\r\n    //   opcServers.push({...opcServer, id: x, status: 'New'});\r\n    //   this.opcServers$.next(opcServers);\r\n    // }));\r\n      const opcServers = this.opcServers$.getValue();\r\n      opcServers.push({...opcServer, id: '1123', status: 'New'});\r\n      this.opcServers$.next(opcServers);\r\n      return of(opcServers);\r\n  }\r\n\r\n  update(id: string, opcServer: OPCServer): Observable<any> {\r\n    // const url = `${this.opcConfigUrl}/${id}`;\r\n    // return this.http.put(url, opcServer).pipe(tap(x => {\r\n    //   const opcServers = this.opcServers$.getValue();\r\n    //   let existed = opcServers.find(o => o.id === id);\r\n    //   if (existed) {\r\n    //     existed = {...opcServer};\r\n    //   }\r\n    //   this.opcServers$.next(opcServers);\r\n    // }));\r\n    const opcServers = this.opcServers$.getValue();\r\n    let existed = opcServers.find(o => o.id === id);\r\n    if (existed) {\r\n      existed = {...opcServer};\r\n    }\r\n    this.opcServers$.next(opcServers);\r\n    return of(opcServers);\r\n  }\r\n\r\n  delete(id: string): Observable<any> {\r\n    // const url = `${this.opcConfigUrl}/${id}`;\r\n    // return this.http.delete(url).pipe(tap(x => {\r\n    //   const opcServers = this.opcServers$.getValue();\r\n    //   const idx = opcServers.findIndex(o => o.id === id);\r\n    //   if (idx > -1) {\r\n    //     opcServers.splice(idx, 1);\r\n    //   }\r\n    //   this.opcServers$.next(opcServers);\r\n    // }));\r\n    const opcServers = this.opcServers$.getValue();\r\n    const idx = opcServers.findIndex(o => o.id === id);\r\n    if (idx > -1) {\r\n      opcServers.splice(idx, 1);\r\n    }\r\n    this.opcServers$.next(opcServers);\r\n    return of(opcServers);\r\n  }\r\n}\r\n"]}